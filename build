#!/bin/sh -e

#
# Script to build SAIL dependencies: libjpeg, libpng, etc. Run it in Git Bash.
#

cd "$(dirname "$0")"

builddir="$PWD/builddir"

########################
#  Common configuation #
########################

platform="$(uname)"

case "$platform" in
    MINGW* | MSYS*)
        cmake_windows_build_type="Release"
        cmake_platform_generate_options="-A x64 -DCMAKE_POSITION_INDEPENDENT_CODE=ON"
        cmake_platform_build_options="--config $cmake_windows_build_type"
        shared_prefix=""
        shared_ext="lib"
    ;;
    Linux* | Darwin*)
        cmake_platform_generate_options="-DCMAKE_POSITION_INDEPENDENT_CODE=ON"
        cmake_platform_build_options=""
        shared_prefix="lib"
        shared_ext="so"
    ;;
    *)
        echo "Error: Unsupported platform '$platform'" >&2
        exit 1
    ;;
esac

######################
#  Extra libs paths  #
######################

SRC="$PWD/src"

libz_path="$SRC/zlib/zlib-1.2.11.tar.gz"
libz_rename_patch_path="$SRC/zlib/zlib-rename.diff"

libzstd_path="$SRC/zstd/zstd-1.4.5.tar.gz"
libzstd_rename_patch_path="$SRC/zstd/zstd-rename.diff"

libjpeg_path="$SRC/jpeg/libjpeg-turbo-2.0.4.tar.gz"
libjpeg_rename_patch_path="$SRC/jpeg/libjpeg-turbo-rename.diff"

libpng_path="$SRC/png/libpng-1.6.37.tar.gz"
libapng_patch_path="$SRC/png/libpng-1.6.37-apng.patch"
libpng_rename_patch_path="$SRC/png/libpng-rename.diff"

libjbig_path="$SRC/jbig/jbigkit-2.1.tar.gz"
libjbig_cmake_lists="$SRC/jbig/jbig-CMakeLists.txt"
libjbig_pc_in="$SRC/jbig/jbig-libjbig.pc.in"
libjbig_export_h="$SRC/jbig/jbig-export.h"
libjbig_rename_patch_path="$SRC/jbig/jbig-rename.diff"
libjbig_export_patch_path="$SRC/jbig/jbig-export.diff"

libtiff_path="$SRC/tiff/tiff-4.1.0.tar.gz"
libtiff_rename_patch_path="$SRC/tiff/tiff-rename.diff"

#################
#  Build setup  #
#################

# Where all built libs and headers will be installed
export B="$PWD/B"
export ROOT="$PWD"

# Clean old builds
rm -rf "$B"
rm -rf "$builddir"

# Used both on Windows and UNIX so create it in advance
mkdir -p "$B/lib"

# Add current dir to PATH to enable pkg-config, nasm etc.
export PATH=$PATH:$PWD/bin

if ! which pkg-config >/dev/null 2>&1; then
    echo "Error: pkg-config is not found in PATH" >&2
    exit 1
fi

unpack()
{
    local path="$1"
    local name="$(basename "$path")"
    local build="$builddir/$name"

    echo
    echo "Building $path"
    echo

    rm -rf "$build"
    mkdir -p "$build"
    cd "$build"
    tar -zxf "$path" --strip-components=1
}

##########
#  ZLIB  #
##########

build_zlib()
{
    unpack "$libz_path"

    # The used zlib version has a bug with not including some AMD64 instructions. Need to include inffas8664.c
    # to fix it.
    sed -i "s|contrib/masmx64/inffasx64.asm|contrib/masmx64/inffasx64.asm contrib/masmx64/inffas8664.c|" CMakeLists.txt

    # Rename the library to have "-sail" suffix
    patch CMakeLists.txt -i "$libz_rename_patch_path"
    sed -i "s|-lz|-lz-sail|" zlib.pc.in
    sed -i "s|-lz|-lz-sail|" zlib.pc.cmakein

    mkdir build
    cd build
    cmake $cmake_platform_generate_options -DAMD64=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 zconf.h   "$B/include/zconf.h"
    install -D -m 644 ../zlib.h "$B/include/zlib.h"
    install -D -m 644 zlib.pc   "$B/lib/pkgconfig/zlib.pc"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "$cmake_windows_build_type/z-sail.lib" "$B/lib/z-sail.lib"
            install -D -m 644 "$cmake_windows_build_type/z-sail.dll" "$B/bin/z-sail.dll"
        ;;
        Linux* | Darwin*)
            find . -name 'libz-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

##########
#  ZSTD  #
##########

build_zstd()
{
    unpack "$libzstd_path"

    # Enable pkg-config on Windows
    sed -i "s|^if (UNIX)|if (UNIX OR WIN32)|" build/cmake/lib/CMakeLists.txt

    # Rename the library to have "-sail" suffix
    patch build/cmake/lib/CMakeLists.txt -i "$libzstd_rename_patch_path"
    sed -i "s|-lzstd|-lzstd-sail|" lib/libzstd.pc.in

    cd build/cmake
    mkdir build
    cd build
    cmake $cmake_platform_generate_options -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 ../../../lib/zstd.h "$B/include/zstd.h"
    install -D -m 644 lib/libzstd.pc      "$B/lib/pkgconfig/libzstd.pc"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "lib/$cmake_windows_build_type/zstd-sail.lib" "$B/lib/zstd-sail.lib"
            install -D -m 644 "lib/$cmake_windows_build_type/zstd-sail.dll" "$B/bin/zstd-sail.dll"
        ;;
        Linux* | Darwin*)
            cd lib
            find . -name 'libzstd-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

##########
#  JPEG  #
##########

build_jpeg()
{
    if ! which nasm >/dev/null 2>&1; then
        echo "Error: NASM is not found in PATH" >&2
        exit 1
    fi

    unpack "$libjpeg_path"

    # Rename the library to have "-sail" suffix
    patch sharedlib/CMakeLists.txt -i "$libjpeg_rename_patch_path"
    sed -i "s|-ljpeg|-ljpeg-sail|" release/libjpeg.pc.in

    mkdir build
    cd build
    cmake $cmake_platform_generate_options -DENABLE_SHARED=ON -DENABLE_STATIC=OFF -DWITH_TURBOJPEG=OFF -DWITH_CRT_DLL=ON -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 jconfig.h     "$B/include/jconfig.h"
    install -D -m 644 ../jerror.h   "$B/include/jerror.h"
    install -D -m 644 ../jmorecfg.h "$B/include/jmorecfg.h"
    install -D -m 644 ../jpeglib.h  "$B/include/jpeglib.h"

    install -D -m 644 pkgscripts/libjpeg.pc  "$B/lib/pkgconfig/libjpeg.pc"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "$cmake_windows_build_type/jpeg-sail.lib" "$B/lib/jpeg-sail.lib"
            install -D -m 644 "$cmake_windows_build_type/jpeg-sail.dll" "$B/bin/jpeg-sail.dll"
        ;;
        Linux* | Darwin*)
            find . -name 'libjpeg-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

#########
#  PNG  #
#########

build_png()
{
    unpack "$libpng_path"

    patch -p1 < "$libapng_patch_path"

    # Enable the pkg-config file
    sed -i "s|^if(NOT WIN32 OR CYGWIN OR MINGW)|if(WIN32 OR UNIX)|" CMakeLists.txt

    # Rename the library to have "-sail" suffix
    patch CMakeLists.txt -i "$libpng_rename_patch_path"
    sed -i "s|-lpng@PNGLIB_MAJOR@@PNGLIB_MINOR@|-lpng-sail|" libpng.pc.in

    # On Windows we have no libm
    case "$platform" in
        MINGW* | MSYS*)
            sed -i "s|-lm||" CMakeLists.txt
        ;;
    esac

    mkdir build
    cd build
    cmake $cmake_platform_generate_options -DPNG_SHARED=ON -DPNG_STATIC=OFF -DPNG_TESTS=OFF -DCMAKE_INSTALL_PREFIX="$B" \
            -DZLIB_LIBRARY="$B/lib/${shared_prefix}z-sail.${shared_ext}" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 pnglibconf.h "$B/include/libpng16/pnglibconf.h"
    install -D -m 644 ../png.h     "$B/include/libpng16/png.h"
    install -D -m 644 ../pngconf.h "$B/include/libpng16/pngconf.h"

    install -D -m 644 libpng16.pc  "$B/lib/pkgconfig/libpng16.pc"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "$cmake_windows_build_type/png-sail.lib" "$B/lib/png-sail.lib"
            install -D -m 644 "$cmake_windows_build_type/png-sail.dll" "$B/bin/png-sail.dll"
        ;;
        Linux* | Darwin*)
            find . -name 'libpng-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

##########
#  JBIG  #
##########

build_jbig()
{
    unpack "$libjbig_path"

    install -D -m 644 "$libjbig_cmake_lists" "CMakeLists.txt"
    install -D -m 644 "$libjbig_pc_in"       "libjbig.pc.in"
    install -D -m 644 "$libjbig_export_h"    "libjbig/jbig-export.h"

    # Patch JBIG to export functions
    patch -p1 < "$libjbig_export_patch_path"

    # Rename the library to have "-sail" suffix
    patch CMakeLists.txt -i "$libjbig_rename_patch_path"
    sed -i "s|-ljbig|-ljbig-sail|" libjbig.pc.in

    mkdir build
    cd build
    cmake $cmake_platform_generate_options -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 "../libjbig/jbig.h"        "$B/include/jbig.h"
    install -D -m 644 "../libjbig/jbig-export.h" "$B/include/jbig-export.h"

    install -D -m 644 libjbig.pc                 "$B/lib/pkgconfig/libjbig.pc"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "$cmake_windows_build_type/jbig-sail.lib" "$B/lib/jbig-sail.lib"
            install -D -m 644 "$cmake_windows_build_type/jbig-sail.dll" "$B/bin/jbig-sail.dll"
        ;;
        Linux* | Darwin*)
            find . -name 'libjbig-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

##########
#  TIFF  #
##########

build_tiff()
{
    unpack "$libtiff_path"

    # Rename the library to have "-sail" suffix
    patch libtiff/CMakeLists.txt -i "$libtiff_rename_patch_path"
    sed -i "s|-ltiff|-ltiff-sail|" libtiff-4.pc.in

    # "build" already exists in tiff-4.1.0
    mkdir bld
    cd bld
    cmake $cmake_platform_generate_options -DBUILD_SHARED_LIBS=ON -Dcxx=OFF -DCMAKE_INSTALL_PREFIX="$B" \
            -DZLIB_LIBRARY="$B/lib/${shared_prefix}z-sail.${shared_ext}"                                                \
            -DJPEG_LIBRARY="$B/lib/${shared_prefix}jpeg-sail.${shared_ext}"                                             \
            -DJBIG_LIBRARY="$B/lib/${shared_prefix}jbig-sail.${shared_ext}" -DJBIG_INCLUDE_DIR="$B/include"             \
            -DZSTD_LIBRARY="$B/lib/${shared_prefix}zstd-sail.${shared_ext}" -DZSTD_INCLUDE_DIR="$B/include" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 ../libtiff/tiff.h     "$B/include/tiff.h"
    install -D -m 644 libtiff/tiffconf.h    "$B/include/tiffconf.h"
    install -D -m 644 ../libtiff/tiffio.h   "$B/include/tiffio.h"
    install -D -m 644 ../libtiff/tiffvers.h "$B/include/tiffvers.h"

    install -D -m 644 libtiff-4.pc          "$B/lib/pkgconfig/libtiff-4.pc"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "libtiff/$cmake_windows_build_type/tiff-sail.lib" "$B/lib/tiff-sail.lib"
            install -D -m 644 "libtiff/$cmake_windows_build_type/tiff-sail.dll" "$B/bin/tiff-sail.dll"
        ;;
        Linux* | Darwin*)
            cd libtiff
            find . -name 'libtiff-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

###########
#  BUILD  #
###########

build_zlib
build_zstd

build_jpeg
build_png
build_jbig
build_tiff

echo
echo Success
echo
