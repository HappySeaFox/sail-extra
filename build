#!/bin/sh -e

#
# Script to build SAIL dependencies: libjpeg, libpng, etc. Run it in Git Bash.
#

cd "$(dirname "$0")"

builddir="$PWD/builddir"
download="$PWD/download"

########################
#  Common configuation #
########################

platform="$(uname)"

case "$platform" in
    MINGW* | MSYS*)
        cmake_windows_build_type="Release"
        cmake_platform_generate_options="-A x64 -DCMAKE_POSITION_INDEPENDENT_CODE=ON"
        cmake_platform_build_options="--config $cmake_windows_build_type"
        shared_prefix=""
        shared_ext="lib"
    ;;
    Linux* | Darwin*)
        cmake_platform_generate_options="-DCMAKE_POSITION_INDEPENDENT_CODE=ON"
        cmake_platform_build_options=""
        shared_prefix="lib"
        shared_ext="so"
    ;;
    *)
        echo "Error: Unsupported platform '$platform'" >&2
        exit 1
    ;;
esac

######################
#  Extra libs paths  #
######################

SRC="$PWD/src"

libz_path="$SRC/zlib-ng/zlib-ng-1.9.9-b1.tar.gz"
libz_rename_patch_path="$SRC/zlib-ng/zlib-rename.diff"

libzstd_path="$SRC/zstd/zstd-1.4.5.tar.gz"
libzstd_rename_patch_path="$SRC/zstd/zstd-rename.diff"

libjpeg_path="$SRC/jpeg/libjpeg-turbo-2.0.4.tar.gz"
libjpeg_rename_patch_path="$SRC/jpeg/libjpeg-turbo-rename.diff"

libpng_path="$SRC/png/libpng-1.6.37.tar.gz"
libapng_patch_path="$SRC/png/libpng-1.6.37-apng.patch"
libpng_rename_patch_path="$SRC/png/libpng-rename.diff"

libjbig_path="$SRC/jbig/jbigkit-2.1.tar.gz"
libjbig_cmake_lists="$SRC/jbig/jbig-CMakeLists.txt"
libjbig_pc_in="$SRC/jbig/jbig-libjbig.pc.in"
libjbig_jbig_def="$SRC/jbig/jbig-jbig.def"
libjbig_rename_patch_path="$SRC/jbig/jbig-rename.diff"
libjbig_fixes_patch_path="$SRC/jbig/jbig-fixes.diff"

libtiff_path="$SRC/tiff/tiff-4.1.0.tar.gz"
libtiff_rename_patch_path="$SRC/tiff/tiff-rename.diff"

libgif_path="$SRC/gif/giflib-5.2.1.tar.gz"
libgif_cmake_lists="$SRC/gif/gif-CMakeLists.txt"
libgif_pc_in="$SRC/gif/gif-giflib.pc.in"
libgif_gif_lib_def="$SRC/gif/gif-gif_lib.def"
libgif_rename_patch_path="$SRC/gif/gif-rename.diff"
libgif_fixes_patch_path="$SRC/gif/gif-fixes.diff"

perl_url="https://strawberryperl.com/download/5.32.1.1/strawberry-perl-5.32.1.1-32bit-portable.zip"
perl_size_check="154581246"
libaom_path="$SRC/avif/aom-3.1.0.tar.gz"
libaom_rename_patch_path="$SRC/avif/aom-rename.diff"
libavif_path="$SRC/avif/libavif-0.9.2.tar.gz"
libavif_rename_patch_path="$SRC/avif/libavif-rename.diff"
libavif_find_aom_patch_path="$SRC/avif/libavif-find-aom.diff"

#################
#  Build setup  #
#################

# Where all built libs and headers will be installed
export B="$PWD/B"
export ROOT="$PWD"

# Clean old builds
rm -rf "$B"
rm -rf "$builddir"

mkdir -p "$download"

# Used both on Windows and UNIX so create it in advance
mkdir -p "$B/lib"

# Add current dir to PATH to enable pkg-config, nasm etc.
export PATH=$PATH:$PWD/bin

if ! which pkg-config >/dev/null 2>&1; then
    echo "Error: pkg-config is not found in PATH" >&2
    exit 1
fi

unpack()
{
    local path="$1"
    local name="$(basename "$path")"
    local build="$builddir/$name"

    echo
    echo "Building $path"
    echo

    rm -rf "$build"
    mkdir -p "$build"
    cd "$build"
    tar -zxf "$path" --strip-components=1
}

##########
#  ZLIB  #
##########

build_zlib()
{
    unpack "$libz_path"

    # Rename the library to have "-sail" suffix
    patch CMakeLists.txt -i "$libz_rename_patch_path"

    mkdir build
    cd build
    cmake $cmake_platform_generate_options -DZLIB_COMPAT=ON -DZLIB_ENABLE_TESTS=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 zconf.h   "$B/include/zconf.h"
    install -D -m 644 ../zlib.h "$B/include/zlib.h"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "$cmake_windows_build_type/z-sail.lib" "$B/lib/zlib.lib"
            install -D -m 644 "$cmake_windows_build_type/z-sail.dll" "$B/bin/z-sail.dll"
        ;;
        Linux* | Darwin*)
            find . -name 'libz-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

##########
#  ZSTD  #
##########

build_zstd()
{
    unpack "$libzstd_path"

    # Enable pkg-config on Windows
    sed -i "s|^if (UNIX)|if (UNIX OR WIN32)|" build/cmake/lib/CMakeLists.txt

    # Rename the library to have "-sail" suffix
    patch build/cmake/lib/CMakeLists.txt -i "$libzstd_rename_patch_path"

    cd build/cmake
    mkdir build
    cd build
    cmake $cmake_platform_generate_options -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 ../../../lib/zstd.h "$B/include/zstd.h"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "lib/$cmake_windows_build_type/zstd-sail.lib" "$B/lib/zstd.lib"
            install -D -m 644 "lib/$cmake_windows_build_type/zstd-sail.dll" "$B/bin/zstd-sail.dll"
        ;;
        Linux* | Darwin*)
            cd lib
            find . -name 'libzstd-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

##########
#  JPEG  #
##########

build_jpeg()
{
    if ! which nasm >/dev/null 2>&1; then
        echo "Error: NASM is not found in PATH" >&2
        exit 1
    fi

    unpack "$libjpeg_path"

    # Rename the library to have "-sail" suffix
    patch sharedlib/CMakeLists.txt -i "$libjpeg_rename_patch_path"

    mkdir build
    cd build
    cmake $cmake_platform_generate_options -DENABLE_SHARED=ON -DENABLE_STATIC=OFF -DWITH_TURBOJPEG=OFF -DWITH_CRT_DLL=ON -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 jconfig.h     "$B/include/jconfig.h"
    install -D -m 644 ../jerror.h   "$B/include/jerror.h"
    install -D -m 644 ../jmorecfg.h "$B/include/jmorecfg.h"
    install -D -m 644 ../jpeglib.h  "$B/include/jpeglib.h"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "$cmake_windows_build_type/jpeg-sail.lib" "$B/lib/jpeg.lib"
            install -D -m 644 "$cmake_windows_build_type/jpeg-sail.dll" "$B/bin/jpeg-sail.dll"
        ;;
        Linux* | Darwin*)
            find . -name 'libjpeg-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

#########
#  PNG  #
#########

build_png()
{
    unpack "$libpng_path"

    patch -p1 < "$libapng_patch_path"

    # Enable the pkg-config file
    sed -i "s|^if(NOT WIN32 OR CYGWIN OR MINGW)|if(WIN32 OR UNIX)|" CMakeLists.txt

    # Rename the library to have "-sail" suffix
    patch CMakeLists.txt -i "$libpng_rename_patch_path"

    # On Windows we have no libm
    case "$platform" in
        MINGW* | MSYS*)
            sed -i "s|-lm||" CMakeLists.txt
        ;;
    esac

    mkdir build
    cd build
    cmake $cmake_platform_generate_options -DPNG_SHARED=ON -DPNG_STATIC=OFF -DPNG_TESTS=OFF -DCMAKE_INSTALL_PREFIX="$B" \
            -DZLIB_LIBRARY="$B/lib/${shared_prefix}zlib.${shared_ext}" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 pnglibconf.h "$B/include/pnglibconf.h"
    install -D -m 644 ../png.h     "$B/include/png.h"
    install -D -m 644 ../pngconf.h "$B/include/pngconf.h"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "$cmake_windows_build_type/png-sail.lib" "$B/lib/libpng16.lib"
            install -D -m 644 "$cmake_windows_build_type/png-sail.dll" "$B/bin/png-sail.dll"
        ;;
        Linux* | Darwin*)
            find . -name 'libpng-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

##########
#  JBIG  #
##########

build_jbig()
{
    unpack "$libjbig_path"

    install -D -m 644 "$libjbig_cmake_lists" "CMakeLists.txt"
    install -D -m 644 "$libjbig_pc_in"       "libjbig.pc.in"
    install -D -m 644 "$libjbig_jbig_def"    "libjbig/jbig.def"

    # Patch JBIG to export functions
    patch -p1 < "$libjbig_fixes_patch_path"

    # Rename the library to have "-sail" suffix
    patch CMakeLists.txt -i "$libjbig_rename_patch_path"

    mkdir build
    cd build
    cmake $cmake_platform_generate_options -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 "../libjbig/jbig.h" "$B/include/jbig.h"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "$cmake_windows_build_type/jbig-sail.lib" "$B/lib/jbig.lib"
            install -D -m 644 "$cmake_windows_build_type/jbig-sail.dll" "$B/bin/jbig-sail.dll"
        ;;
        Linux* | Darwin*)
            find . -name 'libjbig-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

##########
#  TIFF  #
##########

build_tiff()
{
    unpack "$libtiff_path"

    # Rename the library to have "-sail" suffix
    patch libtiff/CMakeLists.txt -i "$libtiff_rename_patch_path"

    # "build" already exists in tiff-4.1.0
    mkdir bld
    cd bld
    cmake $cmake_platform_generate_options -DBUILD_SHARED_LIBS=ON -Dcxx=OFF -DCMAKE_INSTALL_PREFIX="$B" \
            -DZLIB_LIBRARY="$B/lib/${shared_prefix}zlib.${shared_ext}"                                  \
            -DJPEG_LIBRARY="$B/lib/${shared_prefix}jpeg.${shared_ext}"                                  \
            -DJBIG_LIBRARY="$B/lib/${shared_prefix}jbig.${shared_ext}" -DJBIG_INCLUDE_DIR="$B/include"  \
            -DZSTD_LIBRARY="$B/lib/${shared_prefix}zstd.${shared_ext}" -DZSTD_INCLUDE_DIR="$B/include" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 ../libtiff/tiff.h     "$B/include/tiff.h"
    install -D -m 644 libtiff/tiffconf.h    "$B/include/tiffconf.h"
    install -D -m 644 ../libtiff/tiffio.h   "$B/include/tiffio.h"
    install -D -m 644 ../libtiff/tiffvers.h "$B/include/tiffvers.h"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "libtiff/$cmake_windows_build_type/tiff-sail.lib" "$B/lib/tiff.lib"
            install -D -m 644 "libtiff/$cmake_windows_build_type/tiff-sail.dll" "$B/bin/tiff-sail.dll"
        ;;
        Linux* | Darwin*)
            cd libtiff
            find . -name 'libtiff-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

#########
#  GIF  #
#########

build_gif()
{
    unpack "$libgif_path"

    install -D -m 644 "$libgif_cmake_lists" "CMakeLists.txt"
    install -D -m 644 "$libgif_gif_lib_def" "gif_lib.def"
    install -D -m 644 "$libgif_pc_in"       "giflib.pc.in"

    # Rename the library to have "-sail" suffix
    patch CMakeLists.txt -i "$libgif_rename_patch_path"

    # Fix compilation issues
    patch -p1 < "$libgif_fixes_patch_path"

    mkdir build
    cd build
    cmake $cmake_platform_generate_options -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 "../gif_lib.h" "$B/include/gif_lib.h"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "$cmake_windows_build_type/gif-sail.lib" "$B/lib/gif.lib"
            install -D -m 644 "$cmake_windows_build_type/gif-sail.dll" "$B/bin/gif-sail.dll"
        ;;
        Linux* | Darwin*)
            find . -name 'libgif-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

##########
#  AVIF  #
##########

download_perl()
{
    local name=$(basename "$perl_url")
    local path="$download/$name"

    if [ -f "$path" ]; then
        local perl_size=$(stat -c %s "$path")

        if [ $perl_size -eq $perl_size_check ]; then
            return
        fi
    fi

    curl -k "$perl_url" -o "$path"
}

unpack_perl()
{
    local name=$(basename "$perl_url")
    local path="$download/$name"

    mkdir -p "$builddir/$name"
    unzip "$path" -d "$builddir/$name"

    export PATH="$builddir/$name/perl/bin:$PATH"
}

build_aom()
{
    case "$platform" in
        MINGW* | MSYS*)
            download_perl
            unpack_perl
        ;;
    esac

    unpack "$libaom_path"

    # Rename the library to have "-sail" suffix
    patch -p1 -i "$libaom_rename_patch_path"

    mkdir bld
    cd bld
    cmake $cmake_platform_generate_options -DCMAKE_BUILD_TYPE=Release -DENABLE_DOCS=OFF -DENABLE_EXAMPLES=OFF -DENABLE_TESTDATA=OFF -DENABLE_TESTS=OFF \
            -DENABLE_TOOLS=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 "../aom/aom.h"              "$B/include/aom/aom.h"
    install -D -m 644 "../aom/aom_codec.h"        "$B/include/aom/aom_codec.h"
    install -D -m 644 "../aom/aom_decoder.h"      "$B/include/aom/aom_decoder.h"
    install -D -m 644 "../aom/aom_encoder.h"      "$B/include/aom/aom_encoder.h"
    install -D -m 644 "../aom/aom_frame_buffer.h" "$B/include/aom/aom_frame_buffer.h"
    install -D -m 644 "../aom/aom_image.h"        "$B/include/aom/aom_image.h"
    install -D -m 644 "../aom/aom_integer.h"      "$B/include/aom/aom_integer.h"
    install -D -m 644 "../aom/aomcx.h"            "$B/include/aom/aomcx.h"
    install -D -m 644 "../aom/aomdx.h"            "$B/include/aom/aomdx.h"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "$cmake_windows_build_type/aom-sail.lib" "$B/lib/aom.lib"
            install -D -m 644 "$cmake_windows_build_type/aom-sail.dll" "$B/bin/aom-sail.dll"
        ;;
        Linux* | Darwin*)
            find . -name 'libaom-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

build_avif()
{
    unpack "$libavif_path"

    # Rename the library to have "-sail" suffix
    patch CMakeLists.txt -i "$libavif_rename_patch_path"

    # Find AOM in our location
    patch CMakeLists.txt -i "$libavif_find_aom_patch_path"

    mkdir build
    cd build
    cmake $cmake_platform_generate_options -DCMAKE_BUILD_TYPE=Release -DAVIF_CODEC_AOM=ON -DAOM_INCLUDE_DIR="$B/include" \
            -DCMAKE_INSTALL_PREFIX="$B" -DCMAKE_PREFIX_PATH="$B" ..
    cmake --build . $cmake_platform_build_options

    # install
    install -D -m 644 "../include/avif/avif.h" "$B/include/avif/avif.h"

    case "$platform" in
        MINGW* | MSYS*)
            install -D -m 644 "$cmake_windows_build_type/avif-sail.lib" "$B/lib/avif.lib"
            install -D -m 644 "$cmake_windows_build_type/avif-sail.dll" "$B/bin/avif-sail.dll"
        ;;
        Linux* | Darwin*)
            find . -name 'libavif-sail.so*' -exec cp -dp '{}' "$B/lib/{}" ';'
        ;;
    esac

    cd "$ROOT"
}

###########
#  BUILD  #
###########

build_zlib
build_zstd
build_aom

build_jpeg
build_png
build_jbig
build_tiff
build_gif
build_avif

echo
echo Success
echo
