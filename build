#!/bin/sh -e

#
# Script to build SAIL dependencies: libjpeg, libpng, etc. Run it in Git Bash.
#

cd "$(dirname "$0")"

builddir="$PWD/builddir"

########################
#  Common configuation #
########################

cmake_options="-A x64"
cmake_build_type="Release"

######################
#  Extra libs paths  #
######################

libz_path="$PWD/src/zlib-1.2.11.tar.gz"
libzstd_path="$PWD/src/zstd-1.4.5.tar.gz"

libjpeg_path="$PWD/src/libjpeg-turbo-2.0.4.tar.gz"
libpng_path="$PWD/src/libpng-1.6.37.tar.gz"
libapng_patch_path="$PWD/src/libpng-1.6.37-apng.patch"
libtiff_path="$PWD/src/tiff-4.1.0.tar.gz"

#################
#  Build setup  #
#################

# Where all built libs and headers will be installed
export B="$PWD/B"
export ROOT="$PWD"

# Clean old builds
rm -rf "$B"
rm -rf "$builddir"

# Add current dir to PATH to enable pkg-config, nasm etc.
export PATH=$PATH:$PWD/bin

if ! which pkg-config.exe >/dev/null 2>&1; then
    echo "pkg-config is not found in PATH" >&2
    exit 1
fi

unpack()
{
    local path="$1"
    local name="$(basename "$path")"
    local build="$builddir/$name"

    echo
    echo "Building $path"
    echo

    rm -rf "$build"
    mkdir -p "$build"
    cd "$build"
    tar -zxf "$path" --strip-components=1
}

##########
#  ZLIB  #
##########

build_zlib()
{
    unpack "$libz_path"

    # The used zlib version has a bug with not including some AMD64 instructions. Need to include inffas8664.c
    # to fix it.
    sed -i "s|contrib/masmx64/inffasx64.asm|contrib/masmx64/inffasx64.asm contrib/masmx64/inffas8664.c|" CMakeLists.txt

    mkdir build
    cd build
    cmake $cmake_options -DAMD64=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . --config $cmake_build_type

    # install
    install -D -m 644 zconf.h     "$B/include/zconf.h"
    install -D -m 644 ../zlib.h   "$B/include/zlib.h"
    install -D -m 644 zlib.pc     "$B/lib/pkgconfig/zlib.pc"

    install -D -m 644 $cmake_build_type/zlibstatic.lib "$B/lib/z.lib"

    cd "$ROOT"
}

##########
#  ZSTD  #
##########

build_zstd()
{
    unpack "$libzstd_path"

    # Enable pkg-config on Windows
    sed -i "s|^if (UNIX)|if (UNIX OR WIN32)|" build/cmake/lib/CMakeLists.txt

    cd build/cmake
    mkdir build
    cd build
    cmake $cmake_options -DZSTD_BUILD_SHARED=OFF -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . --config $cmake_build_type --target install

    # move the static library
    mv "$B/lib/zstd_static.lib" "$B/lib/zstd.lib"

    cd "$ROOT"
}

##########
#  JPEG  #
##########

build_jpeg()
{
    if ! which nasm >/dev/null 2>&1; then
        echo "NASM is not found in PATH" >&2
        exit 1
    fi

    unpack "$libjpeg_path"

    mkdir build
    cd build
    cmake $cmake_options -DENABLE_SHARED=OFF -DENABLE_STATIC=ON -DWITH_TURBOJPEG=OFF -DWITH_CRT_DLL=ON -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . --config $cmake_build_type

    # install
    install -D -m 644 jconfig.h     "$B/include/jconfig.h"
    install -D -m 644 ../jerror.h   "$B/include/jerror.h"
    install -D -m 644 ../jmorecfg.h "$B/include/jmorecfg.h"
    install -D -m 644 ../jpeglib.h  "$B/include/jpeglib.h"

    install -D -m 644 pkgscripts/libjpeg.pc  "$B/lib/pkgconfig/libjpeg.pc"

    install -D -m 644 $cmake_build_type/jpeg-static.lib "$B/lib/jpeg.lib"

    cd "$ROOT"
}

#########
#  PNG  #
#########

build_png()
{
    unpack "$libpng_path"

    patch -p1 < "$libapng_patch_path"

    # Enable the pkg-config file
    sed -i "s|^if(NOT WIN32 OR CYGWIN OR MINGW)|if(WIN32)|" CMakeLists.txt

    # On Windows we have no libm
    sed -i "s|-lm||" CMakeLists.txt

    mkdir build
    cd build
    cmake $cmake_options -DPNG_SHARED=OFF -DPNG_STATIC=ON -DPNG_TESTS=OFF -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . --config $cmake_build_type

    # install
    install -D -m 644 pnglibconf.h "$B/include/libpng16/pnglibconf.h"
    install -D -m 644 ../png.h     "$B/include/libpng16/png.h"
    install -D -m 644 ../pngconf.h "$B/include/libpng16/pngconf.h"

    install -D -m 644 libpng16.pc  "$B/lib/pkgconfig/libpng16.pc"

    install -D -m 644 $cmake_build_type/libpng16_static.lib "$B/lib/png16.lib"

    cd "$ROOT"
}

##########
#  TIFF  #
##########

build_tiff()
{
    unpack "$libtiff_path"

    # "build" already exists in tiff-4.1.0
    mkdir bld
    cd bld
    cmake $cmake_options -DBUILD_SHARED_LIBS=OFF -Dcxx=OFF -DCMAKE_INSTALL_PREFIX="$B" ..
    cmake --build . --config $cmake_build_type

    # install
    install -D -m 644 ../libtiff/tiff.h     "$B/include/tiff.h"
    install -D -m 644 libtiff/tiffconf.h    "$B/include/tiffconf.h"
    install -D -m 644 ../libtiff/tiffio.h   "$B/include/tiffio.h"
    install -D -m 644 ../libtiff/tiffvers.h "$B/include/tiffvers.h"

    install -D -m 644 libtiff-4.pc          "$B/lib/pkgconfig/libtiff-4.pc"

    install -D -m 644 libtiff/$cmake_build_type/tiff.lib "$B/lib/tiff.lib"

    cd "$ROOT"
}

###########
#  BUILD  #
###########

build_zlib
build_zstd

build_jpeg
build_png
build_tiff

echo
echo Success
echo
